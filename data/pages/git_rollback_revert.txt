====== Git undo, reset or revert ======
 
If you have found this page you probably came here since you wanted to clear your working directory from all the changes that you have made. 

The simple answer is: 
# Clear working directory tree from all changes 
  $ git checkout -f HEAD 
 
This is, however, not the best way to do it. A better way is: 
# Clears the working directory tree, and stashes all the changes. 
  $ git stash 
 
 
git stash allows you to get your changes back any time you need them in case you change your mind. It is also possible to inspect and manipulate the stashes. 
# List all the stashes 
<code>
$ git stash list 
stash@{0}: WIP on admin_ui: 0c1a80a Removed annotation from JdbcAdminService, it is now explicity initialized in the applicationContext. 
stash@{1}: WIP on admin_ui: 14e12e6 Added foreign keys for UserRole 
stash@{2}: WIP on master: d188ecd Merge branch 'master' of semc-git:customercare 
stash@{3}: WIP on master: 3763795 More work on user_details. 
... 
</code>
 
# Apply the latest stash, and remove it from the stack 
$ git stash pop 
 
# Apply a named patch, but leave it on the stack 
  $ git stash apply stash@{2}  
 
# Drop a stash 
   $ git stash drop stash@{3}  
 
# Clear the entire stash stack (almost never needed) 
   $ git stash clear 
 
# A better way to purge the stash 
  $ git reflog expire --expire=30.days refs/stash 
 
What about git reset then, it sounds like it should do about the same as git co -f HEAD. It doesn't. git reset is used for setting the current reference pointer, HEAD. 

# Reset the latest commit, and leave the changes in the index. 
  $ git reset --soft HEAD^ 
 
# Reset the latest commit, and leave the changes in the working directory 
  $ git reset HEAD^ 
 
# Undo add, move the changes from the index to the working directory 
  $ git reset 
 
# Reset the latest successful pull or merge 
  $ git reset --hard ORIG_HEAD 
 
# Reset the latest failed pull or merge 
  $ git reset --hard 
 
# Reset the latest pull or merge, into a dirty working tree 
  $ git reset --merge ORIG_HEAD 
 
You can do more things with reset, but the above covers the typical cases. And now to the last thing, git revert. What does it do? git revert creates a new commit that is the opposite of the commit it names. 

# Show the commits 
<code>
$ git log --oneline 
4717a5c new line 
7e38e95 added tapir file 
</code>
 
# Revert the commit named, 4717a5c, and commit it. 
  $ git revert 4717a5c 
 
# Revert the HEAD commit, but don't commit it 
  $ git revert -n HEAD 
 