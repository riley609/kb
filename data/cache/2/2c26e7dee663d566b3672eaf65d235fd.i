a:81:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Git undo, reset or revert";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:"If you have found this page you probably came here since you wanted to clear your working directory from all the changes that you have made. ";}i:2;i:43;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:184;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:184;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"The simple answer is: 
# Clear working directory tree from all changes ";}i:2;i:186;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:257;}i:9;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:23:"$ git checkout -f HEAD ";}i:2;i:257;}i:10;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:257;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:"This is, however, not the best way to do it. A better way is: 
# Clears the working directory tree, and stashes all the changes. ";}i:2;i:286;}i:12;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:415;}i:13;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:12:"$ git stash ";}i:2;i:415;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:415;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:"git stash allows you to get your changes back any time you need them in case you change your mind. It is also possible to inspect and manipulate the stashes. 
# List all the stashes ";}i:2;i:435;}i:16;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:625;}i:17;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:375:"
$ git stash list 
stash@{0}: WIP on admin_ui: 0c1a80a Removed annotation from JdbcAdminService, it is now explicity initialized in the applicationContext. 
stash@{1}: WIP on admin_ui: 14e12e6 Added foreign keys for UserRole 
stash@{2}: WIP on master: d188ecd Merge branch 'master' of semc-git:customercare 
stash@{3}: WIP on master: 3763795 More work on user_details. 
... 
";i:1;N;i:2;N;}i:2;i:625;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:625;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"# Apply the latest stash, and remove it from the stack 
$ git stash pop ";}i:2;i:1011;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1083;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1083;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"# Apply a named patch, but leave it on the stack ";}i:2;i:1086;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1135;}i:24;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:29:"$ git stash apply stash@{2}  ";}i:2;i:1135;}i:25;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1135;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"# Drop a stash ";}i:2;i:1170;}i:27;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1185;}i:28;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:29:" $ git stash drop stash@{3}  ";}i:2;i:1185;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1185;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"# Clear the entire stash stack (almost never needed) ";}i:2;i:1220;}i:31;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1273;}i:32;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:19:" $ git stash clear ";}i:2;i:1273;}i:33;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1273;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"# A better way to purge the stash ";}i:2;i:1298;}i:35;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1332;}i:36;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:48:"$ git reflog expire --expire=30.days refs/stash ";}i:2;i:1332;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1332;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:178:"What about git reset then, it sounds like it should do about the same as git co -f HEAD. It doesn't. git reset is used for setting the current reference pointer, HEAD. ";}i:2;i:1386;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1564;}i:40;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1564;}i:41;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"# Reset the latest commit, and leave the changes in the index. ";}i:2;i:1566;}i:42;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1629;}i:43;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:25:"$ git reset --soft HEAD^ ";}i:2;i:1629;}i:44;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1629;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"# Reset the latest commit, and leave the changes in the working directory ";}i:2;i:1660;}i:46;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1734;}i:47;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"$ git reset HEAD^ ";}i:2;i:1734;}i:48;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1734;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"# Undo add, move the changes from the index to the working directory ";}i:2;i:1758;}i:50;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1827;}i:51;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:12:"$ git reset ";}i:2;i:1827;}i:52;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1827;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"# Reset the latest successful pull or merge ";}i:2;i:1845;}i:54;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1889;}i:55;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:29:"$ git reset --hard ORIG_HEAD ";}i:2;i:1889;}i:56;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1889;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"# Reset the latest failed pull or merge ";}i:2;i:1924;}i:58;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1964;}i:59;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:19:"$ git reset --hard ";}i:2;i:1964;}i:60;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1964;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"# Reset the latest pull or merge, into a dirty working tree ";}i:2;i:1989;}i:62;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2049;}i:63;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:30:"$ git reset --merge ORIG_HEAD ";}i:2;i:2049;}i:64;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2049;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:214:"You can do more things with reset, but the above covers the typical cases. And now to the last thing, git revert. What does it do? git revert creates a new commit that is the opposite of the commit it names. ";}i:2;i:2085;}i:66;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2299;}i:67;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2299;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"# Show the commits ";}i:2;i:2301;}i:69;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2326;}i:70;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:66:"
$ git log --oneline 
4717a5c new line 
7e38e95 added tapir file 
";i:1;N;i:2;N;}i:2;i:2326;}i:71;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2326;}i:72;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"# Revert the commit named, 4717a5c, and commit it. ";}i:2;i:2403;}i:73;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2454;}i:74;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:"$ git revert 4717a5c ";}i:2;i:2454;}i:75;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2454;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"# Revert the HEAD commit, but don't commit it ";}i:2;i:2481;}i:77;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2527;}i:78;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:"$ git revert -n HEAD ";}i:2;i:2527;}i:79;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2552;}i:80;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:2552;}}